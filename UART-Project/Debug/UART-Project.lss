
UART-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000ba8  00000c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000e6  008000e6  00000cc2  2**0
                  ALLOC
  3 .stab         000011a0  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000882  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3f       	cpi	r26, 0xFA	; 250
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
  8a:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	eb e2       	ldi	r30, 0x2B	; 43
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
  a2:	ea e2       	ldi	r30, 0x2A	; 42
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
  aa:	e0 e4       	ldi	r30, 0x40	; 64
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	80 83       	st	Z, r24
  b2:	e0 e4       	ldi	r30, 0x40	; 64
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	e9 e2       	ldi	r30, 0x29	; 41
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	80 83       	st	Z, r24
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <UART_sendByte>:
	UBRRH_REG = BAUD_PRESCALE>>8;
	UBRRL_REG = BAUD_PRESCALE;
}

void UART_sendByte(const uint8_t data)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Flag is set when the TX Buffer is ready to recieve new data to transmit */
	while(BIT_IS_CLEAR(UCSRA_REG,UDRE)){}
  d2:	eb e2       	ldi	r30, 0x2B	; 43
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	80 72       	andi	r24, 0x20	; 32
  de:	90 70       	andi	r25, 0x00	; 0
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	b9 f3       	breq	.-18     	; 0xd2 <UART_sendByte+0xc>
	UDR_REG = data;
  e4:	ec e2       	ldi	r30, 0x2C	; 44
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	80 83       	st	Z, r24
}
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data */
	while(BIT_IS_CLEAR(UCSRA_REG,RXC)){}
  fc:	eb e2       	ldi	r30, 0x2B	; 43
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	dc f7       	brge	.-10     	; 0xfc <UART_recieveByte+0x8>
	return UDR_REG;
 106:	ec e2       	ldi	r30, 0x2C	; 44
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
}
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <UART_sendString>:

void UART_sendString(const uint8_t *Str)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <UART_sendString+0x6>
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	9b 83       	std	Y+3, r25	; 0x03
 120:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	0e c0       	rjmp	.+28     	; 0x142 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	9b 81       	ldd	r25, Y+3	; 0x03
 130:	fc 01       	movw	r30, r24
 132:	e2 0f       	add	r30, r18
 134:	f3 1f       	adc	r31, r19
 136:	80 81       	ld	r24, Z
 138:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_sendByte>
		i++;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	9b 81       	ldd	r25, Y+3	; 0x03
 14c:	fc 01       	movw	r30, r24
 14e:	e2 0f       	add	r30, r18
 150:	f3 1f       	adc	r31, r19
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	39 f7       	brne	.-50     	; 0x126 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <UART_receiveString>:


void UART_receiveString(uint8_t *Str)
{
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	00 d0       	rcall	.+0      	; 0x16e <UART_receiveString+0xa>
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	9b 83       	std	Y+3, r25	; 0x03
 176:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 178:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	9b 81       	ldd	r25, Y+3	; 0x03
 184:	8c 01       	movw	r16, r24
 186:	02 0f       	add	r16, r18
 188:	13 1f       	adc	r17, r19
 18a:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_recieveByte>
 18e:	f8 01       	movw	r30, r16
 190:	80 83       	st	Z, r24
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <UART_receiveString+0x4e>
	while(Str[i] != '\x0D')
	{
		i++;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	9b 81       	ldd	r25, Y+3	; 0x03
 1a4:	8c 01       	movw	r16, r24
 1a6:	02 0f       	add	r16, r18
 1a8:	13 1f       	adc	r17, r19
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_recieveByte>
 1ae:	f8 01       	movw	r30, r16
 1b0:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\x0D')
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	9b 81       	ldd	r25, Y+3	; 0x03
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	80 81       	ld	r24, Z
 1c4:	8d 30       	cpi	r24, 0x0D	; 13
 1c6:	31 f7       	brne	.-52     	; 0x194 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	9b 81       	ldd	r25, Y+3	; 0x03
 1d2:	fc 01       	movw	r30, r24
 1d4:	e2 0f       	add	r30, r18
 1d6:	f3 1f       	adc	r31, r19
 1d8:	10 82       	st	Z, r1
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <DIO_setPinDirection>:

#include "DIO.h"


E_STATUS DIO_setPinDirection(uint8_t port, uint8_t pin, uint8_t dir)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <DIO_setPinDirection+0x6>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <DIO_setPinDirection+0x8>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <DIO_setPinDirection+0xa>
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	8a 83       	std	Y+2, r24	; 0x02
 1fa:	6b 83       	std	Y+3, r22	; 0x03
 1fc:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	08 f0       	brcs	.+2      	; 0x20a <DIO_setPinDirection+0x20>
 208:	d7 c0       	rjmp	.+430    	; 0x3b8 <DIO_setPinDirection+0x1ce>
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_setPinDirection+0x28>
 210:	d3 c0       	rjmp	.+422    	; 0x3b8 <DIO_setPinDirection+0x1ce>
		u8_State=Success;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	3e 83       	std	Y+6, r19	; 0x06
 21e:	2d 83       	std	Y+5, r18	; 0x05
 220:	8d 81       	ldd	r24, Y+5	; 0x05
 222:	9e 81       	ldd	r25, Y+6	; 0x06
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	91 05       	cpc	r25, r1
 228:	09 f4       	brne	.+2      	; 0x22c <DIO_setPinDirection+0x42>
 22a:	43 c0       	rjmp	.+134    	; 0x2b2 <DIO_setPinDirection+0xc8>
 22c:	2d 81       	ldd	r18, Y+5	; 0x05
 22e:	3e 81       	ldd	r19, Y+6	; 0x06
 230:	22 30       	cpi	r18, 0x02	; 2
 232:	31 05       	cpc	r19, r1
 234:	2c f4       	brge	.+10     	; 0x240 <DIO_setPinDirection+0x56>
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	71 f0       	breq	.+28     	; 0x25a <DIO_setPinDirection+0x70>
 23e:	bc c0       	rjmp	.+376    	; 0x3b8 <DIO_setPinDirection+0x1ce>
 240:	2d 81       	ldd	r18, Y+5	; 0x05
 242:	3e 81       	ldd	r19, Y+6	; 0x06
 244:	22 30       	cpi	r18, 0x02	; 2
 246:	31 05       	cpc	r19, r1
 248:	09 f4       	brne	.+2      	; 0x24c <DIO_setPinDirection+0x62>
 24a:	5f c0       	rjmp	.+190    	; 0x30a <DIO_setPinDirection+0x120>
 24c:	8d 81       	ldd	r24, Y+5	; 0x05
 24e:	9e 81       	ldd	r25, Y+6	; 0x06
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	91 05       	cpc	r25, r1
 254:	09 f4       	brne	.+2      	; 0x258 <DIO_setPinDirection+0x6e>
 256:	85 c0       	rjmp	.+266    	; 0x362 <DIO_setPinDirection+0x178>
 258:	af c0       	rjmp	.+350    	; 0x3b8 <DIO_setPinDirection+0x1ce>
		{
		case PortA:
		{
			if(dir==INPUT)
 25a:	8c 81       	ldd	r24, Y+4	; 0x04
 25c:	88 23       	and	r24, r24
 25e:	a9 f4       	brne	.+42     	; 0x28a <DIO_setPinDirection+0xa0>
				CLEAR_BIT(DDRA,pin);
 260:	aa e3       	ldi	r26, 0x3A	; 58
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	ea e3       	ldi	r30, 0x3A	; 58
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_setPinDirection+0x94>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_setPinDirection+0x90>
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	8c 93       	st	X, r24
 288:	97 c0       	rjmp	.+302    	; 0x3b8 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRA,pin);
 28a:	aa e3       	ldi	r26, 0x3A	; 58
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	ea e3       	ldi	r30, 0x3A	; 58
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	48 2f       	mov	r20, r24
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_setPinDirection+0xbe>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_setPinDirection+0xba>
 2ac:	84 2b       	or	r24, r20
 2ae:	8c 93       	st	X, r24
 2b0:	83 c0       	rjmp	.+262    	; 0x3b8 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortB:
		{
			if(dir==INPUT)
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	88 23       	and	r24, r24
 2b6:	a9 f4       	brne	.+42     	; 0x2e2 <DIO_setPinDirection+0xf8>
				CLEAR_BIT(DDRB,pin);
 2b8:	a7 e3       	ldi	r26, 0x37	; 55
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e7 e3       	ldi	r30, 0x37	; 55
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_setPinDirection+0xec>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_setPinDirection+0xe8>
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	6b c0       	rjmp	.+214    	; 0x3b8 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRB,pin);
 2e2:	a7 e3       	ldi	r26, 0x37	; 55
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e7 e3       	ldi	r30, 0x37	; 55
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_setPinDirection+0x116>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_setPinDirection+0x112>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	57 c0       	rjmp	.+174    	; 0x3b8 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortC:
		{
			if(dir==INPUT)
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	88 23       	and	r24, r24
 30e:	a9 f4       	brne	.+42     	; 0x33a <DIO_setPinDirection+0x150>
				CLEAR_BIT(DDRC,pin);
 310:	a4 e3       	ldi	r26, 0x34	; 52
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e4 e3       	ldi	r30, 0x34	; 52
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_setPinDirection+0x144>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_setPinDirection+0x140>
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	8c 93       	st	X, r24
 338:	3f c0       	rjmp	.+126    	; 0x3b8 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRC,pin);
 33a:	a4 e3       	ldi	r26, 0x34	; 52
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e4 e3       	ldi	r30, 0x34	; 52
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	48 2f       	mov	r20, r24
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 2e       	mov	r0, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_setPinDirection+0x16e>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_setPinDirection+0x16a>
 35c:	84 2b       	or	r24, r20
 35e:	8c 93       	st	X, r24
 360:	2b c0       	rjmp	.+86     	; 0x3b8 <DIO_setPinDirection+0x1ce>
		}
		break;
		case PortD:
		{
			if(dir==INPUT)
 362:	8c 81       	ldd	r24, Y+4	; 0x04
 364:	88 23       	and	r24, r24
 366:	a9 f4       	brne	.+42     	; 0x392 <DIO_setPinDirection+0x1a8>
				CLEAR_BIT(DDRD,pin);
 368:	a1 e3       	ldi	r26, 0x31	; 49
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	e1 e3       	ldi	r30, 0x31	; 49
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	48 2f       	mov	r20, r24
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 2e       	mov	r0, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_setPinDirection+0x19c>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_setPinDirection+0x198>
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	8c 93       	st	X, r24
 390:	13 c0       	rjmp	.+38     	; 0x3b8 <DIO_setPinDirection+0x1ce>
			else
				SET_BIT(DDRD,pin);
 392:	a1 e3       	ldi	r26, 0x31	; 49
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e1 e3       	ldi	r30, 0x31	; 49
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 2e       	mov	r0, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_setPinDirection+0x1c6>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_setPinDirection+0x1c2>
 3b4:	84 2b       	or	r24, r20
 3b6:	8c 93       	st	X, r24
		}
		break;
		}
	}
	return u8_State;
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ba:	26 96       	adiw	r28, 0x06	; 6
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	08 95       	ret

000003cc <DIO_setPortDirection>:

E_STATUS DIO_setPortDirection(uint8_t port, uint8_t dir)
{
 3cc:	df 93       	push	r29
 3ce:	cf 93       	push	r28
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <DIO_setPortDirection+0x6>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <DIO_setPortDirection+0x8>
 3d4:	0f 92       	push	r0
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	8a 83       	std	Y+2, r24	; 0x02
 3dc:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <DIO_setPortDirection+0x1e>
 3e8:	50 c0       	rjmp	.+160    	; 0x48a <DIO_setPortDirection+0xbe>
		u8_State=Success;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	3d 83       	std	Y+5, r19	; 0x05
 3f6:	2c 83       	std	Y+4, r18	; 0x04
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	9d 81       	ldd	r25, Y+5	; 0x05
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	91 05       	cpc	r25, r1
 400:	09 f1       	breq	.+66     	; 0x444 <DIO_setPortDirection+0x78>
 402:	2c 81       	ldd	r18, Y+4	; 0x04
 404:	3d 81       	ldd	r19, Y+5	; 0x05
 406:	22 30       	cpi	r18, 0x02	; 2
 408:	31 05       	cpc	r19, r1
 40a:	2c f4       	brge	.+10     	; 0x416 <DIO_setPortDirection+0x4a>
 40c:	8c 81       	ldd	r24, Y+4	; 0x04
 40e:	9d 81       	ldd	r25, Y+5	; 0x05
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	61 f0       	breq	.+24     	; 0x42c <DIO_setPortDirection+0x60>
 414:	3a c0       	rjmp	.+116    	; 0x48a <DIO_setPortDirection+0xbe>
 416:	2c 81       	ldd	r18, Y+4	; 0x04
 418:	3d 81       	ldd	r19, Y+5	; 0x05
 41a:	22 30       	cpi	r18, 0x02	; 2
 41c:	31 05       	cpc	r19, r1
 41e:	f1 f0       	breq	.+60     	; 0x45c <DIO_setPortDirection+0x90>
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	9d 81       	ldd	r25, Y+5	; 0x05
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	91 05       	cpc	r25, r1
 428:	29 f1       	breq	.+74     	; 0x474 <DIO_setPortDirection+0xa8>
 42a:	2f c0       	rjmp	.+94     	; 0x48a <DIO_setPortDirection+0xbe>
		{
		case PortA:
		{
			if(dir==OUTPUT)
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	29 f4       	brne	.+10     	; 0x43c <DIO_setPortDirection+0x70>
			{
				DDRA=OUTPUT_PORT;
 432:	ea e3       	ldi	r30, 0x3A	; 58
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	80 83       	st	Z, r24
 43a:	27 c0       	rjmp	.+78     	; 0x48a <DIO_setPortDirection+0xbe>
			}else
				DDRA=INPUT_PORT;
 43c:	ea e3       	ldi	r30, 0x3A	; 58
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	10 82       	st	Z, r1
 442:	23 c0       	rjmp	.+70     	; 0x48a <DIO_setPortDirection+0xbe>
		}
		break;
		case PortB:
		{
			if(dir==OUTPUT)
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	29 f4       	brne	.+10     	; 0x454 <DIO_setPortDirection+0x88>
			{
				DDRB=OUTPUT_PORT;
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 83       	st	Z, r24
 452:	1b c0       	rjmp	.+54     	; 0x48a <DIO_setPortDirection+0xbe>
			}else
				DDRB=INPUT_PORT;
 454:	e7 e3       	ldi	r30, 0x37	; 55
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	10 82       	st	Z, r1
 45a:	17 c0       	rjmp	.+46     	; 0x48a <DIO_setPortDirection+0xbe>
		}
		break;
		case PortC:
		{
			if(dir==OUTPUT)
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	29 f4       	brne	.+10     	; 0x46c <DIO_setPortDirection+0xa0>
			{
				DDRC=OUTPUT_PORT;
 462:	e4 e3       	ldi	r30, 0x34	; 52
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	80 83       	st	Z, r24
 46a:	0f c0       	rjmp	.+30     	; 0x48a <DIO_setPortDirection+0xbe>
			}else
				DDRC=INPUT_PORT;
 46c:	e4 e3       	ldi	r30, 0x34	; 52
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	10 82       	st	Z, r1
 472:	0b c0       	rjmp	.+22     	; 0x48a <DIO_setPortDirection+0xbe>
		}
		break;
		case PortD:
		{
			if(dir==OUTPUT)
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	29 f4       	brne	.+10     	; 0x484 <DIO_setPortDirection+0xb8>
			{
				DDRD=OUTPUT_PORT;
 47a:	e1 e3       	ldi	r30, 0x31	; 49
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	80 83       	st	Z, r24
 482:	03 c0       	rjmp	.+6      	; 0x48a <DIO_setPortDirection+0xbe>
			}else
				DDRD=INPUT_PORT;
 484:	e1 e3       	ldi	r30, 0x31	; 49
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	10 82       	st	Z, r1
		}
		break;
		}
	}
	return u8_State;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	cf 91       	pop	r28
 498:	df 91       	pop	r29
 49a:	08 95       	ret

0000049c <DIO_togglePin>:


E_STATUS DIO_togglePin(uint8_t port, uint8_t pin)
{
 49c:	df 93       	push	r29
 49e:	cf 93       	push	r28
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <DIO_togglePin+0x6>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <DIO_togglePin+0x8>
 4a4:	0f 92       	push	r0
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	8a 83       	std	Y+2, r24	; 0x02
 4ac:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 4b2:	8a 81       	ldd	r24, Y+2	; 0x02
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <DIO_togglePin+0x1e>
 4b8:	74 c0       	rjmp	.+232    	; 0x5a2 <DIO_togglePin+0x106>
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	88 30       	cpi	r24, 0x08	; 8
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <DIO_togglePin+0x26>
 4c0:	70 c0       	rjmp	.+224    	; 0x5a2 <DIO_togglePin+0x106>
		u8_State=Success;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	3d 83       	std	Y+5, r19	; 0x05
 4ce:	2c 83       	std	Y+4, r18	; 0x04
 4d0:	8c 81       	ldd	r24, Y+4	; 0x04
 4d2:	9d 81       	ldd	r25, Y+5	; 0x05
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	91 05       	cpc	r25, r1
 4d8:	49 f1       	breq	.+82     	; 0x52c <DIO_togglePin+0x90>
 4da:	2c 81       	ldd	r18, Y+4	; 0x04
 4dc:	3d 81       	ldd	r19, Y+5	; 0x05
 4de:	22 30       	cpi	r18, 0x02	; 2
 4e0:	31 05       	cpc	r19, r1
 4e2:	2c f4       	brge	.+10     	; 0x4ee <DIO_togglePin+0x52>
 4e4:	8c 81       	ldd	r24, Y+4	; 0x04
 4e6:	9d 81       	ldd	r25, Y+5	; 0x05
 4e8:	00 97       	sbiw	r24, 0x00	; 0
 4ea:	61 f0       	breq	.+24     	; 0x504 <DIO_togglePin+0x68>
 4ec:	5a c0       	rjmp	.+180    	; 0x5a2 <DIO_togglePin+0x106>
 4ee:	2c 81       	ldd	r18, Y+4	; 0x04
 4f0:	3d 81       	ldd	r19, Y+5	; 0x05
 4f2:	22 30       	cpi	r18, 0x02	; 2
 4f4:	31 05       	cpc	r19, r1
 4f6:	71 f1       	breq	.+92     	; 0x554 <DIO_togglePin+0xb8>
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	91 05       	cpc	r25, r1
 500:	e9 f1       	breq	.+122    	; 0x57c <DIO_togglePin+0xe0>
 502:	4f c0       	rjmp	.+158    	; 0x5a2 <DIO_togglePin+0x106>
		{
		case PortA:
			TOGGLE_BIT(PORTA,pin);
 504:	ab e3       	ldi	r26, 0x3B	; 59
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	eb e3       	ldi	r30, 0x3B	; 59
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	48 2f       	mov	r20, r24
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	28 2f       	mov	r18, r24
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 2e       	mov	r0, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_togglePin+0x86>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_togglePin+0x82>
 526:	84 27       	eor	r24, r20
 528:	8c 93       	st	X, r24
 52a:	3b c0       	rjmp	.+118    	; 0x5a2 <DIO_togglePin+0x106>
			break;
		case PortB:
			TOGGLE_BIT(PORTB,pin);
 52c:	a8 e3       	ldi	r26, 0x38	; 56
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	e8 e3       	ldi	r30, 0x38	; 56
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	48 2f       	mov	r20, r24
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 2e       	mov	r0, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_togglePin+0xae>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_togglePin+0xaa>
 54e:	84 27       	eor	r24, r20
 550:	8c 93       	st	X, r24
 552:	27 c0       	rjmp	.+78     	; 0x5a2 <DIO_togglePin+0x106>
			break;
		case PortC:
			TOGGLE_BIT(PORTC,pin);
 554:	a5 e3       	ldi	r26, 0x35	; 53
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e5 e3       	ldi	r30, 0x35	; 53
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	48 2f       	mov	r20, r24
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 2e       	mov	r0, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_togglePin+0xd6>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_togglePin+0xd2>
 576:	84 27       	eor	r24, r20
 578:	8c 93       	st	X, r24
 57a:	13 c0       	rjmp	.+38     	; 0x5a2 <DIO_togglePin+0x106>
			break;
		case PortD:
			TOGGLE_BIT(PORTD,pin);
 57c:	a2 e3       	ldi	r26, 0x32	; 50
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e2 e3       	ldi	r30, 0x32	; 50
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	48 2f       	mov	r20, r24
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 2e       	mov	r0, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_togglePin+0xfe>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_togglePin+0xfa>
 59e:	84 27       	eor	r24, r20
 5a0:	8c 93       	st	X, r24
			break;
		}

	}
	return u8_State;
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <DIO_readPin>:


E_STATUS DIO_readPin(uint8_t port, uint8_t pin, uint8_t * value)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	27 97       	sbiw	r28, 0x07	; 7
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	6b 83       	std	Y+3, r22	; 0x03
 5cc:	5d 83       	std	Y+5, r21	; 0x05
 5ce:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	84 30       	cpi	r24, 0x04	; 4
 5d8:	08 f0       	brcs	.+2      	; 0x5dc <DIO_readPin+0x28>
 5da:	a7 c0       	rjmp	.+334    	; 0x72a <DIO_readPin+0x176>
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	88 30       	cpi	r24, 0x08	; 8
 5e0:	08 f0       	brcs	.+2      	; 0x5e4 <DIO_readPin+0x30>
 5e2:	a3 c0       	rjmp	.+326    	; 0x72a <DIO_readPin+0x176>
		u8_State=Success;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	3f 83       	std	Y+7, r19	; 0x07
 5f0:	2e 83       	std	Y+6, r18	; 0x06
 5f2:	4e 81       	ldd	r20, Y+6	; 0x06
 5f4:	5f 81       	ldd	r21, Y+7	; 0x07
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	51 05       	cpc	r21, r1
 5fa:	c1 f1       	breq	.+112    	; 0x66c <DIO_readPin+0xb8>
 5fc:	8e 81       	ldd	r24, Y+6	; 0x06
 5fe:	9f 81       	ldd	r25, Y+7	; 0x07
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	91 05       	cpc	r25, r1
 604:	34 f4       	brge	.+12     	; 0x612 <DIO_readPin+0x5e>
 606:	2e 81       	ldd	r18, Y+6	; 0x06
 608:	3f 81       	ldd	r19, Y+7	; 0x07
 60a:	21 15       	cp	r18, r1
 60c:	31 05       	cpc	r19, r1
 60e:	71 f0       	breq	.+28     	; 0x62c <DIO_readPin+0x78>
 610:	8c c0       	rjmp	.+280    	; 0x72a <DIO_readPin+0x176>
 612:	4e 81       	ldd	r20, Y+6	; 0x06
 614:	5f 81       	ldd	r21, Y+7	; 0x07
 616:	42 30       	cpi	r20, 0x02	; 2
 618:	51 05       	cpc	r21, r1
 61a:	09 f4       	brne	.+2      	; 0x61e <DIO_readPin+0x6a>
 61c:	47 c0       	rjmp	.+142    	; 0x6ac <DIO_readPin+0xf8>
 61e:	8e 81       	ldd	r24, Y+6	; 0x06
 620:	9f 81       	ldd	r25, Y+7	; 0x07
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	91 05       	cpc	r25, r1
 626:	09 f4       	brne	.+2      	; 0x62a <DIO_readPin+0x76>
 628:	61 c0       	rjmp	.+194    	; 0x6ec <DIO_readPin+0x138>
 62a:	7f c0       	rjmp	.+254    	; 0x72a <DIO_readPin+0x176>
		{
		case PortA:
			*value=BIT_READ(PORTA,pin);
 62c:	eb e3       	ldi	r30, 0x3B	; 59
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	48 2f       	mov	r20, r24
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_readPin+0x92>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	2a 95       	dec	r18
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_readPin+0x8e>
 64a:	9a 01       	movw	r18, r20
 64c:	28 23       	and	r18, r24
 64e:	39 23       	and	r19, r25
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_readPin+0xaa>
 65a:	55 95       	asr	r21
 65c:	47 95       	ror	r20
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_readPin+0xa6>
 662:	ca 01       	movw	r24, r20
 664:	ec 81       	ldd	r30, Y+4	; 0x04
 666:	fd 81       	ldd	r31, Y+5	; 0x05
 668:	80 83       	st	Z, r24
 66a:	5f c0       	rjmp	.+190    	; 0x72a <DIO_readPin+0x176>
			break;
		case PortB:
			*value=BIT_READ(PORTB,pin);
 66c:	e8 e3       	ldi	r30, 0x38	; 56
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	48 2f       	mov	r20, r24
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_readPin+0xd2>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_readPin+0xce>
 68a:	9a 01       	movw	r18, r20
 68c:	28 23       	and	r18, r24
 68e:	39 23       	and	r19, r25
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	a9 01       	movw	r20, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_readPin+0xea>
 69a:	55 95       	asr	r21
 69c:	47 95       	ror	r20
 69e:	8a 95       	dec	r24
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_readPin+0xe6>
 6a2:	ca 01       	movw	r24, r20
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	3f c0       	rjmp	.+126    	; 0x72a <DIO_readPin+0x176>
			break;
		case PortC:
			*value=BIT_READ(PORTC,pin);
 6ac:	e5 e3       	ldi	r30, 0x35	; 53
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	48 2f       	mov	r20, r24
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_readPin+0x112>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	2a 95       	dec	r18
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_readPin+0x10e>
 6ca:	9a 01       	movw	r18, r20
 6cc:	28 23       	and	r18, r24
 6ce:	39 23       	and	r19, r25
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a9 01       	movw	r20, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_readPin+0x12a>
 6da:	55 95       	asr	r21
 6dc:	47 95       	ror	r20
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_readPin+0x126>
 6e2:	ca 01       	movw	r24, r20
 6e4:	ec 81       	ldd	r30, Y+4	; 0x04
 6e6:	fd 81       	ldd	r31, Y+5	; 0x05
 6e8:	80 83       	st	Z, r24
 6ea:	1f c0       	rjmp	.+62     	; 0x72a <DIO_readPin+0x176>
			break;
		case PortD:
			*value=BIT_READ(PORTD,pin);
 6ec:	e2 e3       	ldi	r30, 0x32	; 50
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	48 2f       	mov	r20, r24
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_readPin+0x152>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	2a 95       	dec	r18
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_readPin+0x14e>
 70a:	9a 01       	movw	r18, r20
 70c:	28 23       	and	r18, r24
 70e:	39 23       	and	r19, r25
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	88 2f       	mov	r24, r24
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	a9 01       	movw	r20, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_readPin+0x16a>
 71a:	55 95       	asr	r21
 71c:	47 95       	ror	r20
 71e:	8a 95       	dec	r24
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_readPin+0x166>
 722:	ca 01       	movw	r24, r20
 724:	ec 81       	ldd	r30, Y+4	; 0x04
 726:	fd 81       	ldd	r31, Y+5	; 0x05
 728:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 72a:	89 81       	ldd	r24, Y+1	; 0x01
}
 72c:	27 96       	adiw	r28, 0x07	; 7
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <DIO_readPort>:


E_STATUS DIO_readPort(uint8_t port, uint8_t * value)
{
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	00 d0       	rcall	.+0      	; 0x744 <DIO_readPort+0x6>
 744:	00 d0       	rcall	.+0      	; 0x746 <DIO_readPort+0x8>
 746:	00 d0       	rcall	.+0      	; 0x748 <DIO_readPort+0xa>
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	8a 83       	std	Y+2, r24	; 0x02
 74e:	7c 83       	std	Y+4, r23	; 0x04
 750:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	84 30       	cpi	r24, 0x04	; 4
 75a:	e0 f5       	brcc	.+120    	; 0x7d4 <DIO_readPort+0x96>
		u8_State=Success;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	28 2f       	mov	r18, r24
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	3e 83       	std	Y+6, r19	; 0x06
 768:	2d 83       	std	Y+5, r18	; 0x05
 76a:	8d 81       	ldd	r24, Y+5	; 0x05
 76c:	9e 81       	ldd	r25, Y+6	; 0x06
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	91 05       	cpc	r25, r1
 772:	e1 f0       	breq	.+56     	; 0x7ac <DIO_readPort+0x6e>
 774:	2d 81       	ldd	r18, Y+5	; 0x05
 776:	3e 81       	ldd	r19, Y+6	; 0x06
 778:	22 30       	cpi	r18, 0x02	; 2
 77a:	31 05       	cpc	r19, r1
 77c:	2c f4       	brge	.+10     	; 0x788 <DIO_readPort+0x4a>
 77e:	8d 81       	ldd	r24, Y+5	; 0x05
 780:	9e 81       	ldd	r25, Y+6	; 0x06
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	61 f0       	breq	.+24     	; 0x79e <DIO_readPort+0x60>
 786:	26 c0       	rjmp	.+76     	; 0x7d4 <DIO_readPort+0x96>
 788:	2d 81       	ldd	r18, Y+5	; 0x05
 78a:	3e 81       	ldd	r19, Y+6	; 0x06
 78c:	22 30       	cpi	r18, 0x02	; 2
 78e:	31 05       	cpc	r19, r1
 790:	a1 f0       	breq	.+40     	; 0x7ba <DIO_readPort+0x7c>
 792:	8d 81       	ldd	r24, Y+5	; 0x05
 794:	9e 81       	ldd	r25, Y+6	; 0x06
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	91 05       	cpc	r25, r1
 79a:	b1 f0       	breq	.+44     	; 0x7c8 <DIO_readPort+0x8a>
 79c:	1b c0       	rjmp	.+54     	; 0x7d4 <DIO_readPort+0x96>
		{
		case PortA:
			*value=PINA;
 79e:	e9 e3       	ldi	r30, 0x39	; 57
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	eb 81       	ldd	r30, Y+3	; 0x03
 7a6:	fc 81       	ldd	r31, Y+4	; 0x04
 7a8:	80 83       	st	Z, r24
 7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <DIO_readPort+0x96>
			break;
		case PortB:
			*value=PINB;
 7ac:	e6 e3       	ldi	r30, 0x36	; 54
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	eb 81       	ldd	r30, Y+3	; 0x03
 7b4:	fc 81       	ldd	r31, Y+4	; 0x04
 7b6:	80 83       	st	Z, r24
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <DIO_readPort+0x96>
			break;
		case PortC:
			*value=PINC;
 7ba:	e3 e3       	ldi	r30, 0x33	; 51
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	eb 81       	ldd	r30, Y+3	; 0x03
 7c2:	fc 81       	ldd	r31, Y+4	; 0x04
 7c4:	80 83       	st	Z, r24
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <DIO_readPort+0x96>
			break;
		case PortD:
			*value=PIND;
 7c8:	e0 e3       	ldi	r30, 0x30	; 48
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	eb 81       	ldd	r30, Y+3	; 0x03
 7d0:	fc 81       	ldd	r31, Y+4	; 0x04
 7d2:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 7d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7d6:	26 96       	adiw	r28, 0x06	; 6
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <DIO_writePin>:


E_STATUS DIO_writePin(uint8_t port, uint8_t pin, uint8_t data)
{
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <DIO_writePin+0x6>
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <DIO_writePin+0x8>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <DIO_writePin+0xa>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	8a 83       	std	Y+2, r24	; 0x02
 7f8:	6b 83       	std	Y+3, r22	; 0x03
 7fa:	4c 83       	std	Y+4, r20	; 0x04
	E_STATUS u8_State=ERROR;
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	89 83       	std	Y+1, r24	; 0x01
	if(((port>=PortA)&&(port<=PortD))&&((pin<=Pin7)&&(pin>=Pin0))){
 800:	8a 81       	ldd	r24, Y+2	; 0x02
 802:	84 30       	cpi	r24, 0x04	; 4
 804:	08 f0       	brcs	.+2      	; 0x808 <DIO_writePin+0x20>
 806:	d7 c0       	rjmp	.+430    	; 0x9b6 <__stack+0x157>
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	88 30       	cpi	r24, 0x08	; 8
 80c:	08 f0       	brcs	.+2      	; 0x810 <DIO_writePin+0x28>
 80e:	d3 c0       	rjmp	.+422    	; 0x9b6 <__stack+0x157>
		u8_State=Success;
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 814:	8a 81       	ldd	r24, Y+2	; 0x02
 816:	28 2f       	mov	r18, r24
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	3e 83       	std	Y+6, r19	; 0x06
 81c:	2d 83       	std	Y+5, r18	; 0x05
 81e:	8d 81       	ldd	r24, Y+5	; 0x05
 820:	9e 81       	ldd	r25, Y+6	; 0x06
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	91 05       	cpc	r25, r1
 826:	09 f4       	brne	.+2      	; 0x82a <DIO_writePin+0x42>
 828:	43 c0       	rjmp	.+134    	; 0x8b0 <__stack+0x51>
 82a:	2d 81       	ldd	r18, Y+5	; 0x05
 82c:	3e 81       	ldd	r19, Y+6	; 0x06
 82e:	22 30       	cpi	r18, 0x02	; 2
 830:	31 05       	cpc	r19, r1
 832:	2c f4       	brge	.+10     	; 0x83e <DIO_writePin+0x56>
 834:	8d 81       	ldd	r24, Y+5	; 0x05
 836:	9e 81       	ldd	r25, Y+6	; 0x06
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	71 f0       	breq	.+28     	; 0x858 <DIO_writePin+0x70>
 83c:	bc c0       	rjmp	.+376    	; 0x9b6 <__stack+0x157>
 83e:	2d 81       	ldd	r18, Y+5	; 0x05
 840:	3e 81       	ldd	r19, Y+6	; 0x06
 842:	22 30       	cpi	r18, 0x02	; 2
 844:	31 05       	cpc	r19, r1
 846:	09 f4       	brne	.+2      	; 0x84a <DIO_writePin+0x62>
 848:	5f c0       	rjmp	.+190    	; 0x908 <__stack+0xa9>
 84a:	8d 81       	ldd	r24, Y+5	; 0x05
 84c:	9e 81       	ldd	r25, Y+6	; 0x06
 84e:	83 30       	cpi	r24, 0x03	; 3
 850:	91 05       	cpc	r25, r1
 852:	09 f4       	brne	.+2      	; 0x856 <DIO_writePin+0x6e>
 854:	85 c0       	rjmp	.+266    	; 0x960 <__stack+0x101>
 856:	af c0       	rjmp	.+350    	; 0x9b6 <__stack+0x157>
		{
		case PortA:
		{
			if(data==HIGH)
 858:	8c 81       	ldd	r24, Y+4	; 0x04
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	a1 f4       	brne	.+40     	; 0x886 <__stack+0x27>
				SET_BIT(PORTA,pin);
 85e:	ab e3       	ldi	r26, 0x3B	; 59
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	eb e3       	ldi	r30, 0x3B	; 59
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	48 2f       	mov	r20, r24
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 2e       	mov	r0, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	0a 94       	dec	r0
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	84 2b       	or	r24, r20
 882:	8c 93       	st	X, r24
 884:	98 c0       	rjmp	.+304    	; 0x9b6 <__stack+0x157>
			else
				CLEAR_BIT(PORTA,pin);
 886:	ab e3       	ldi	r26, 0x3B	; 59
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	eb e3       	ldi	r30, 0x3B	; 59
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	48 2f       	mov	r20, r24
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	28 2f       	mov	r18, r24
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 2e       	mov	r0, r18
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	0a 94       	dec	r0
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	80 95       	com	r24
 8aa:	84 23       	and	r24, r20
 8ac:	8c 93       	st	X, r24
 8ae:	83 c0       	rjmp	.+262    	; 0x9b6 <__stack+0x157>
		}
		break;
		case PortB:
		{
			if(data==HIGH)
 8b0:	8c 81       	ldd	r24, Y+4	; 0x04
 8b2:	81 30       	cpi	r24, 0x01	; 1
 8b4:	a1 f4       	brne	.+40     	; 0x8de <__stack+0x7f>
				SET_BIT(PORTB,pin);
 8b6:	a8 e3       	ldi	r26, 0x38	; 56
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e8 e3       	ldi	r30, 0x38	; 56
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	48 2f       	mov	r20, r24
 8c2:	8b 81       	ldd	r24, Y+3	; 0x03
 8c4:	28 2f       	mov	r18, r24
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 2e       	mov	r0, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	0a 94       	dec	r0
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	84 2b       	or	r24, r20
 8da:	8c 93       	st	X, r24
 8dc:	6c c0       	rjmp	.+216    	; 0x9b6 <__stack+0x157>
			else
				CLEAR_BIT(PORTB,pin);
 8de:	a8 e3       	ldi	r26, 0x38	; 56
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e8 e3       	ldi	r30, 0x38	; 56
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	48 2f       	mov	r20, r24
 8ea:	8b 81       	ldd	r24, Y+3	; 0x03
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 2e       	mov	r0, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
 900:	80 95       	com	r24
 902:	84 23       	and	r24, r20
 904:	8c 93       	st	X, r24
 906:	57 c0       	rjmp	.+174    	; 0x9b6 <__stack+0x157>
		}
		break;
		case PortC:
		{
			if(data==HIGH)
 908:	8c 81       	ldd	r24, Y+4	; 0x04
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	a1 f4       	brne	.+40     	; 0x936 <__stack+0xd7>
				SET_BIT(PORTC,pin);
 90e:	a5 e3       	ldi	r26, 0x35	; 53
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	e5 e3       	ldi	r30, 0x35	; 53
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	48 2f       	mov	r20, r24
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	28 2f       	mov	r18, r24
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	02 2e       	mov	r0, r18
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	0a 94       	dec	r0
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	84 2b       	or	r24, r20
 932:	8c 93       	st	X, r24
 934:	40 c0       	rjmp	.+128    	; 0x9b6 <__stack+0x157>
			else
				CLEAR_BIT(PORTC,pin);
 936:	a5 e3       	ldi	r26, 0x35	; 53
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	e5 e3       	ldi	r30, 0x35	; 53
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	48 2f       	mov	r20, r24
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	28 2f       	mov	r18, r24
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 2e       	mov	r0, r18
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0xf5>
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	0a 94       	dec	r0
 956:	e2 f7       	brpl	.-8      	; 0x950 <__stack+0xf1>
 958:	80 95       	com	r24
 95a:	84 23       	and	r24, r20
 95c:	8c 93       	st	X, r24
 95e:	2b c0       	rjmp	.+86     	; 0x9b6 <__stack+0x157>
		}
		break;
		case PortD:
		{
			if(data==HIGH)
 960:	8c 81       	ldd	r24, Y+4	; 0x04
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	a1 f4       	brne	.+40     	; 0x98e <__stack+0x12f>
				SET_BIT(PORTD,pin);
 966:	a2 e3       	ldi	r26, 0x32	; 50
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e2 e3       	ldi	r30, 0x32	; 50
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	48 2f       	mov	r20, r24
 972:	8b 81       	ldd	r24, Y+3	; 0x03
 974:	28 2f       	mov	r18, r24
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	02 2e       	mov	r0, r18
 97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x125>
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	0a 94       	dec	r0
 986:	e2 f7       	brpl	.-8      	; 0x980 <__stack+0x121>
 988:	84 2b       	or	r24, r20
 98a:	8c 93       	st	X, r24
 98c:	14 c0       	rjmp	.+40     	; 0x9b6 <__stack+0x157>
			else
				CLEAR_BIT(PORTD,pin);
 98e:	a2 e3       	ldi	r26, 0x32	; 50
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	e2 e3       	ldi	r30, 0x32	; 50
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	48 2f       	mov	r20, r24
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	28 2f       	mov	r18, r24
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 2e       	mov	r0, r18
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0x14d>
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	0a 94       	dec	r0
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <__stack+0x149>
 9b0:	80 95       	com	r24
 9b2:	84 23       	and	r24, r20
 9b4:	8c 93       	st	X, r24
		}
		break;
		}
	}
	return u8_State;
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 9b8:	26 96       	adiw	r28, 0x06	; 6
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <DIO_writePort>:


E_STATUS DIO_writePort(uint8_t port, uint8_t data)
{
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <DIO_writePort+0x6>
 9d0:	00 d0       	rcall	.+0      	; 0x9d2 <DIO_writePort+0x8>
 9d2:	0f 92       	push	r0
 9d4:	cd b7       	in	r28, 0x3d	; 61
 9d6:	de b7       	in	r29, 0x3e	; 62
 9d8:	8a 83       	std	Y+2, r24	; 0x02
 9da:	6b 83       	std	Y+3, r22	; 0x03
	E_STATUS u8_State=ERROR;
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	89 83       	std	Y+1, r24	; 0x01
	if((port>=PortA)&&(port<=PortD)){
 9e0:	8a 81       	ldd	r24, Y+2	; 0x02
 9e2:	84 30       	cpi	r24, 0x04	; 4
 9e4:	a0 f5       	brcc	.+104    	; 0xa4e <DIO_writePort+0x84>
		u8_State=Success;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	89 83       	std	Y+1, r24	; 0x01
		switch(port)
 9ea:	8a 81       	ldd	r24, Y+2	; 0x02
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	3d 83       	std	Y+5, r19	; 0x05
 9f2:	2c 83       	std	Y+4, r18	; 0x04
 9f4:	8c 81       	ldd	r24, Y+4	; 0x04
 9f6:	9d 81       	ldd	r25, Y+5	; 0x05
 9f8:	81 30       	cpi	r24, 0x01	; 1
 9fa:	91 05       	cpc	r25, r1
 9fc:	d1 f0       	breq	.+52     	; 0xa32 <DIO_writePort+0x68>
 9fe:	2c 81       	ldd	r18, Y+4	; 0x04
 a00:	3d 81       	ldd	r19, Y+5	; 0x05
 a02:	22 30       	cpi	r18, 0x02	; 2
 a04:	31 05       	cpc	r19, r1
 a06:	2c f4       	brge	.+10     	; 0xa12 <DIO_writePort+0x48>
 a08:	8c 81       	ldd	r24, Y+4	; 0x04
 a0a:	9d 81       	ldd	r25, Y+5	; 0x05
 a0c:	00 97       	sbiw	r24, 0x00	; 0
 a0e:	61 f0       	breq	.+24     	; 0xa28 <DIO_writePort+0x5e>
 a10:	1e c0       	rjmp	.+60     	; 0xa4e <DIO_writePort+0x84>
 a12:	2c 81       	ldd	r18, Y+4	; 0x04
 a14:	3d 81       	ldd	r19, Y+5	; 0x05
 a16:	22 30       	cpi	r18, 0x02	; 2
 a18:	31 05       	cpc	r19, r1
 a1a:	81 f0       	breq	.+32     	; 0xa3c <DIO_writePort+0x72>
 a1c:	8c 81       	ldd	r24, Y+4	; 0x04
 a1e:	9d 81       	ldd	r25, Y+5	; 0x05
 a20:	83 30       	cpi	r24, 0x03	; 3
 a22:	91 05       	cpc	r25, r1
 a24:	81 f0       	breq	.+32     	; 0xa46 <DIO_writePort+0x7c>
 a26:	13 c0       	rjmp	.+38     	; 0xa4e <DIO_writePort+0x84>
		{
		case PortA:
			PORTA=data;
 a28:	eb e3       	ldi	r30, 0x3B	; 59
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	80 83       	st	Z, r24
 a30:	0e c0       	rjmp	.+28     	; 0xa4e <DIO_writePort+0x84>
			break;
		case PortB:
			PORTB=data;
 a32:	e8 e3       	ldi	r30, 0x38	; 56
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	8b 81       	ldd	r24, Y+3	; 0x03
 a38:	80 83       	st	Z, r24
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <DIO_writePort+0x84>
			break;
		case PortC:
			PORTC=data;
 a3c:	e5 e3       	ldi	r30, 0x35	; 53
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	8b 81       	ldd	r24, Y+3	; 0x03
 a42:	80 83       	st	Z, r24
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <DIO_writePort+0x84>
			break;
		case PortD:
			PORTD=data;
 a46:	e2 e3       	ldi	r30, 0x32	; 50
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	8b 81       	ldd	r24, Y+3	; 0x03
 a4c:	80 83       	st	Z, r24
			break;
		}
	}
	return u8_State;
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	0f 90       	pop	r0
 a5a:	cf 91       	pop	r28
 a5c:	df 91       	pop	r29
 a5e:	08 95       	ret

00000a60 <System_Init>:
uint8_t Wait[20]="WAIT";
uint8_t Stop[20]="STOP";
uint8_t AT[3]="AT";

void System_Init()
{
 a60:	df 93       	push	r29
 a62:	cf 93       	push	r28
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 a68:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	DIO_setPinDirection(PortD,Pin2,OUTPUT);
 a6c:	83 e0       	ldi	r24, 0x03	; 3
 a6e:	62 e0       	ldi	r22, 0x02	; 2
 a70:	41 e0       	ldi	r20, 0x01	; 1
 a72:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_setPinDirection>
	DIO_setPinDirection(PortD,Pin3,OUTPUT);
 a76:	83 e0       	ldi	r24, 0x03	; 3
 a78:	63 e0       	ldi	r22, 0x03	; 3
 a7a:	41 e0       	ldi	r20, 0x01	; 1
 a7c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_setPinDirection>
	DIO_setPinDirection(PortD,Pin4,OUTPUT);
 a80:	83 e0       	ldi	r24, 0x03	; 3
 a82:	64 e0       	ldi	r22, 0x04	; 4
 a84:	41 e0       	ldi	r20, 0x01	; 1
 a86:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_setPinDirection>
}
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	08 95       	ret

00000a90 <System_Update>:

void System_Update()
{
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
	/* Receive byte from terminal */
			UART_receiveString(Str);
 a98:	86 ee       	ldi	r24, 0xE6	; 230
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 b2 00 	call	0x164	; 0x164 <UART_receiveString>
			if(strcmp(Str,Data)==0)  //START Case
 aa0:	86 ee       	ldi	r24, 0xE6	; 230
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	26 ea       	ldi	r18, 0xA6	; 166
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	b9 01       	movw	r22, r18
 aaa:	0e 94 c9 05 	call	0xb92	; 0xb92 <strcmp>
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	a1 f4       	brne	.+40     	; 0xada <System_Update+0x4a>
			{
				DIO_writePin(PortD, Pin2, HIGH);
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	62 e0       	ldi	r22, 0x02	; 2
 ab6:	41 e0       	ldi	r20, 0x01	; 1
 ab8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin3, LOW);
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	63 e0       	ldi	r22, 0x03	; 3
 ac0:	40 e0       	ldi	r20, 0x00	; 0
 ac2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin4, LOW);
 ac6:	83 e0       	ldi	r24, 0x03	; 3
 ac8:	64 e0       	ldi	r22, 0x04	; 4
 aca:	40 e0       	ldi	r20, 0x00	; 0
 acc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				UART_sendString("Green LED is on\r");
 ad0:	80 e6       	ldi	r24, 0x60	; 96
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 89 00 	call	0x112	; 0x112 <UART_sendString>
 ad8:	50 c0       	rjmp	.+160    	; 0xb7a <System_Update+0xea>
			}else if(strcmp(Str,Wait)==0)  //WAIT Case
 ada:	86 ee       	ldi	r24, 0xE6	; 230
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	2a eb       	ldi	r18, 0xBA	; 186
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	b9 01       	movw	r22, r18
 ae4:	0e 94 c9 05 	call	0xb92	; 0xb92 <strcmp>
 ae8:	00 97       	sbiw	r24, 0x00	; 0
 aea:	a1 f4       	brne	.+40     	; 0xb14 <System_Update+0x84>
			{
				DIO_writePin(PortD, Pin2, LOW);
 aec:	83 e0       	ldi	r24, 0x03	; 3
 aee:	62 e0       	ldi	r22, 0x02	; 2
 af0:	40 e0       	ldi	r20, 0x00	; 0
 af2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin3, HIGH);
 af6:	83 e0       	ldi	r24, 0x03	; 3
 af8:	63 e0       	ldi	r22, 0x03	; 3
 afa:	41 e0       	ldi	r20, 0x01	; 1
 afc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin4, LOW);
 b00:	83 e0       	ldi	r24, 0x03	; 3
 b02:	64 e0       	ldi	r22, 0x04	; 4
 b04:	40 e0       	ldi	r20, 0x00	; 0
 b06:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				UART_sendString("Yellow LED is on\r");
 b0a:	81 e7       	ldi	r24, 0x71	; 113
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	0e 94 89 00 	call	0x112	; 0x112 <UART_sendString>
 b12:	33 c0       	rjmp	.+102    	; 0xb7a <System_Update+0xea>
			}else if(strcmp(Str,Stop)==0)  //STOP Case
 b14:	86 ee       	ldi	r24, 0xE6	; 230
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	2e ec       	ldi	r18, 0xCE	; 206
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	b9 01       	movw	r22, r18
 b1e:	0e 94 c9 05 	call	0xb92	; 0xb92 <strcmp>
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	c1 f4       	brne	.+48     	; 0xb56 <System_Update+0xc6>
			{
				DIO_writePin(PortD, Pin2, LOW);
 b26:	83 e0       	ldi	r24, 0x03	; 3
 b28:	62 e0       	ldi	r22, 0x02	; 2
 b2a:	40 e0       	ldi	r20, 0x00	; 0
 b2c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin3, LOW);
 b30:	83 e0       	ldi	r24, 0x03	; 3
 b32:	63 e0       	ldi	r22, 0x03	; 3
 b34:	40 e0       	ldi	r20, 0x00	; 0
 b36:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				DIO_writePin(PortD, Pin4, HIGH);
 b3a:	83 e0       	ldi	r24, 0x03	; 3
 b3c:	64 e0       	ldi	r22, 0x04	; 4
 b3e:	41 e0       	ldi	r20, 0x01	; 1
 b40:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <DIO_writePin>
				UART_sendString("Red LED is on\r");
 b44:	83 e8       	ldi	r24, 0x83	; 131
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 89 00 	call	0x112	; 0x112 <UART_sendString>
				UART_receiveString(Str);
 b4c:	86 ee       	ldi	r24, 0xE6	; 230
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 b2 00 	call	0x164	; 0x164 <UART_receiveString>
 b54:	12 c0       	rjmp	.+36     	; 0xb7a <System_Update+0xea>
			}else if(strcmp(Str,AT)==0)  //AT Case
 b56:	86 ee       	ldi	r24, 0xE6	; 230
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	22 ee       	ldi	r18, 0xE2	; 226
 b5c:	30 e0       	ldi	r19, 0x00	; 0
 b5e:	b9 01       	movw	r22, r18
 b60:	0e 94 c9 05 	call	0xb92	; 0xb92 <strcmp>
 b64:	00 97       	sbiw	r24, 0x00	; 0
 b66:	29 f4       	brne	.+10     	; 0xb72 <System_Update+0xe2>
			{
				UART_sendString("OK\r");
 b68:	82 e9       	ldi	r24, 0x92	; 146
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 94 89 00 	call	0x112	; 0x112 <UART_sendString>
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <System_Update+0xea>
			}else
			{
				UART_sendString("Invalid Entry!\r");
 b72:	86 e9       	ldi	r24, 0x96	; 150
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 89 00 	call	0x112	; 0x112 <UART_sendString>
			}
}
 b7a:	cf 91       	pop	r28
 b7c:	df 91       	pop	r29
 b7e:	08 95       	ret

00000b80 <main>:
 */

#include "APP/app.h"

int main(void)
{
 b80:	df 93       	push	r29
 b82:	cf 93       	push	r28
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
	System_Init();
 b88:	0e 94 30 05 	call	0xa60	; 0xa60 <System_Init>
	while(1)
	{
		System_Update();
 b8c:	0e 94 48 05 	call	0xa90	; 0xa90 <System_Update>
 b90:	fd cf       	rjmp	.-6      	; 0xb8c <main+0xc>

00000b92 <strcmp>:
 b92:	fb 01       	movw	r30, r22
 b94:	dc 01       	movw	r26, r24
 b96:	8d 91       	ld	r24, X+
 b98:	01 90       	ld	r0, Z+
 b9a:	80 19       	sub	r24, r0
 b9c:	01 10       	cpse	r0, r1
 b9e:	d9 f3       	breq	.-10     	; 0xb96 <strcmp+0x4>
 ba0:	99 0b       	sbc	r25, r25
 ba2:	08 95       	ret

00000ba4 <_exit>:
 ba4:	f8 94       	cli

00000ba6 <__stop_program>:
 ba6:	ff cf       	rjmp	.-2      	; 0xba6 <__stop_program>
